{"version":3,"file":"static/js/760.bc676ddc.chunk.js","mappings":"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","sources":["redux/phonebook/phonebook-selectors.js","views/ContactsView/ContactsView.styled.jsx","components/ContactForm/ContactForm.styled.jsx","../node_modules/nanoid/index.prod.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","views/ContactsView/ContactsView.jsx"],"sourcesContent":["export const getContacts = (state) => state.contacts.items;\nexport const getFilter = (state) => state.contacts.filter;\n\nexport const getVisibleContacts = (state) => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Wrapper = styled.div`\r\n\tmargin: 20px auto;\r\n\tpadding: 20px;\r\n\tmax-width: 380px;\r\n\tbackground-color: rgb(36, 196, 196);\r\n\tborder: 1px solid rgb(57, 133, 168);\r\n\tborder-radius: 6px;\r\n\tbox-shadow: 7px 7px 13px 0px rgba(0, 0, 0, 0.38);\r\n`;\r\nexport const Title = styled.h1`\r\n\tcolor: white;\r\n`;\r\nexport const TitleContacts = styled.h2`\r\n\tcolor: white;\r\n`;\r\nexport const P = styled.p`\r\n\tpadding-top: 15px;\r\n\tcolor: white;\r\n`;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Form = styled.form`\r\n\tmargin-top: 10px;\r\n\tmargin-bottom: 30px;\r\n`;\r\nexport const Label = styled.label`\r\n\tdisplay: block;\r\n\tmargin-bottom: 20px;\r\n\tcolor: rgb(57, 133, 168);\r\n\tfont-weight: 500;\r\n\tfont-size: 15px;\r\n`;\r\nexport const Input = styled.input`\r\n\tdisplay: block;\r\n\tmargin-left: auto;\r\n\tmargin-right: auto;\r\n\tpadding: 10px;\r\n\tborder: 1px solid rgba(33, 33, 33, 0.2);\r\n\tborder-radius: 4px;\r\n\tcursor: pointer;\r\n\tfont-size: 15px;\r\n`;\r\nexport const Button = styled.button`\r\n\tpadding: 5px;\r\n\tmargin: 7px 0;\r\n\tborder: none;\r\n\toutline: none;\r\n\tborder-radius: 6px;\r\n\tbackground-color: rgb(57, 133, 168);\r\n\tcolor: #fff;\r\n\tcursor: pointer;\r\n\ttext-transform: capitalize;\r\n\tbox-shadow: 7px 7px 13px 0px rgba(0, 0, 0, 0.38);\r\n\ttransition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n\t&:hover {\r\n\t\tbackground-color: rgb(129, 214, 164);\r\n\t\tcolor: white;\r\n\t}\r\n`;\r\n","import { urlAlphabet } from './url-alphabet/index.js'\nif (false) {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { getVisibleContacts } from \"../../redux/phonebook/phonebook-selectors\";\r\nimport { addContact } from \"../../redux/phonebook/phonebook-operations\";\r\nimport { Form, Label, Input, Button } from \"./ContactForm.styled\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nexport default function ContactForm() {\r\n\tconst [name, setName] = useState(\"\");\r\n\tconst [number, setNumber] = useState(\"\");\r\n\r\n\tconst contacts = useSelector(getVisibleContacts);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tresetInput();\r\n\t\tif (\r\n\t\t\tcontacts.find(\r\n\t\t\t\t(contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\ttoast.error(`${name} is already in contacts.`);\r\n\t\t} else if (contacts.find((contact) => contact.number === number)) {\r\n\t\t\ttoast.error(`${number} is already in contacts.`);\r\n\t\t} else {\r\n\t\t\tdispatch(addContact({ name, number }));\r\n\t\t}\r\n\t};\r\n\r\n\tconst resetInput = () => {\r\n\t\tsetName(\"\");\r\n\t\tsetNumber(\"\");\r\n\t};\r\n\r\n\tconst nameInputId = nanoid();\r\n\tconst numberInputId = nanoid();\r\n\r\n\treturn (\r\n\t\t<Form onSubmit={handleSubmit}>\r\n\t\t\t<Label htmlFor={nameInputId}>\r\n\t\t\t\tName\r\n\t\t\t\t<Input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tname=\"name\"\r\n\t\t\t\t\tid={nameInputId}\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\tpattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n\t\t\t\t\ttitle=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n\t\t\t\t\trequired\r\n\t\t\t\t\tplaceholder=\"Andrei Potapov\"\r\n\t\t\t\t/>\r\n\t\t\t</Label>\r\n\t\t\t<Label htmlFor={numberInputId}>\r\n\t\t\t\tNumber\r\n\t\t\t\t<Input\r\n\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\tname=\"number\"\r\n\t\t\t\t\tid={numberInputId}\r\n\t\t\t\t\tvalue={number}\r\n\t\t\t\t\tonChange={(e) => setNumber(e.target.value)}\r\n\t\t\t\t\tpattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n\t\t\t\t\ttitle=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n\t\t\t\t\trequired\r\n\t\t\t\t\tplaceholder=\"111-11-11\"\r\n\t\t\t\t/>\r\n\t\t\t</Label>\r\n\t\t\t<Button type=\"sumbit\">Add contact</Button>\r\n\t\t</Form>\r\n\t);\r\n}\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Button = styled.button`\r\n\tpadding: 5px;\r\n\tmargin: 10px 0;\r\n\tborder: none;\r\n\toutline: none;\r\n\tborder-radius: 6px;\r\n\tbackground-color: rgb(57, 133, 168);\r\n\tcolor: #fff;\r\n\tcursor: pointer;\r\n\ttext-transform: capitalize;\r\n\tbox-shadow: 7px 7px 13px 0px rgba(0, 0, 0, 0.38);\r\n\ttransition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n\t&:hover {\r\n\t\tbackground-color: rgb(129, 214, 164);\r\n\t\tcolor: white;\r\n\t}\r\n`;\r\nexport const Ul = styled.ul`\r\n\tmargin-top: 30px;\r\n\tcolor: var(--secondaryTextColor);\r\n\tfont-weight: 500;\r\n\tfont-size: 18px;\r\n`;\r\nexport const Li = styled.li`\r\n\tdisplay: flex;\r\n\tjustify-content: space-between;\r\n\talign-items: center;\r\n`;\r\nexport const P = styled.p`\r\n\tcolor: rgb(57, 133, 168);\r\n`;\r\n","import { getVisibleContacts } from \"../../redux/phonebook/phonebook-selectors\";\r\nimport { deleteContact } from \"../../redux/phonebook/phonebook-operations\";\r\nimport { Ul, Li, Button, P } from \"./ContactList.styled\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nexport default function ContactList() {\r\n\tconst contacts = useSelector(getVisibleContacts);\r\n\tconst dispatch = useDispatch();\r\n\tconst onDelete = (id) => dispatch(deleteContact(id));\r\n\r\n\treturn (\r\n\t\t<Ul>\r\n\t\t\t{contacts.map(({ id, name, number }) => (\r\n\t\t\t\t<Li key={id}>\r\n\t\t\t\t\t<P>\r\n\t\t\t\t\t\t{name}: {number}\r\n\t\t\t\t\t</P>\r\n\t\t\t\t\t<Button type=\"button\" onClick={() => onDelete(id)}>\r\n\t\t\t\t\t\tDelete\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Li>\r\n\t\t\t))}\r\n\t\t</Ul>\r\n\t);\r\n}\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Label = styled.label`\r\n\tdisplay: block;\r\n\tmargin-top: 10px;\r\n\tcolor: rgb(57, 133, 168);\r\n\tfont-weight: 500;\r\n\tfont-size: 18px;\r\n`;\r\nexport const Input = styled.input`\r\n\tdisplay: block;\r\n\tmargin-top: 10px;\r\n\tpadding: 10px;\r\n\tmargin-left: auto;\r\n\tmargin-right: auto;\r\n\tborder: 1px solid rgba(33, 33, 33, 0.2);\r\n\tborder-radius: 4px;\r\n\tcursor: pointer;\r\n\tfont-size: 15px;\r\n`;\r\n","import { changeFilter } from \"../../redux/phonebook/phonebook-operations\";\r\nimport { getFilter } from \"../../redux/phonebook/phonebook-selectors\";\r\nimport { Label, Input } from \"./Filter.styled\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nexport default function Filter() {\r\n\tconst dispatch = useDispatch();\r\n\tconst filter = useSelector(getFilter);\r\n\tconst onChange = (value) => dispatch(changeFilter(value));\r\n\r\n\tconst handleFilterChange = (e) => {\r\n\t\tconst { value } = e.target;\r\n\t\tonChange(value);\r\n\t};\r\n\r\n\tconst filterInputId = nanoid();\r\n\r\n\treturn (\r\n\t\t<Label htmlFor={filterInputId}>\r\n\t\t\t<Input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tname=\"name\"\r\n\t\t\t\tvalue={filter}\r\n\t\t\t\tid={filterInputId}\r\n\t\t\t\tonChange={handleFilterChange}\r\n\t\t\t\tplaceholder=\"Find contacts by name\"\r\n\t\t\t/>\r\n\t\t</Label>\r\n\t);\r\n}\r\n","import { getVisibleContacts } from \"../../redux/phonebook/phonebook-selectors\";\r\nimport { fetchContacts } from \"../../redux/phonebook/phonebook-operations\";\r\nimport {\r\n\tWrapper,\r\n\tTitle,\r\n\tTitleContacts,\r\n\tP,\r\n} from \"../../views/ContactsView/ContactsView.styled\";\r\nimport { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Toaster } from \"react-hot-toast\";\r\nimport ContactForm from \"../../components/ContactForm/ContactForm\";\r\nimport ContactList from \"../../components/ContactList/ContactList\";\r\nimport Filter from \"../../components/Filter/Filter\";\r\n\r\nexport default function ContactView() {\r\n\tconst contacts = useSelector(getVisibleContacts);\r\n\tconst dispatch = useDispatch();\r\n\tuseEffect(() => dispatch(fetchContacts()), [dispatch]);\r\n\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t<Toaster />\r\n\r\n\t\t\t<Title>Phonebook</Title>\r\n\t\t\t<ContactForm />\r\n\t\t\t<TitleContacts>Contacts</TitleContacts>\r\n\r\n\t\t\t<Filter />\r\n\t\t\t{contacts.length > 0 ? (\r\n\t\t\t\t<ContactList contacts={contacts} />\r\n\t\t\t) : (\r\n\t\t\t\t<P>Your phonebook is empty.</P>\r\n\t\t\t)}\r\n\t\t</Wrapper>\r\n\t);\r\n}\r\n"],"names":["getFilter","state","contacts","filter","getVisibleContacts","items","getContacts","normalizedFilter","toLowerCase","name","includes","Wrapper","styled","Title","TitleContacts","P","Form","Label","Input","Button","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","resetInput","nameInputId","numberInputId","onSubmit","e","preventDefault","find","contact","toast","addContact","htmlFor","type","value","onChange","target","pattern","title","required","placeholder","Ul","Li","ContactList","map","onClick","deleteContact","onDelete","Filter","filterInputId","changeFilter","ContactView","useEffect","fetchContacts","length"],"sourceRoot":""}